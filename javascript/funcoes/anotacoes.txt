------- Funções -------

- Estrutura: Variaveis criadas dentro de uma função apenas podem ser utilidas dentro dela.
Quando invocamos o "return", a função para de ser executada.

function test(a, b){
    resturn a + b;
}


------- Funções Anônima -------
Funcções que representam expressões. Uma variavel pode armazenar uma função.


let soma = function (a, b){
 return a + b
}

soma(1, 2)


------- Função autoinvocável -------

IIFE (Immediately Invoked Function Expression)
Uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada.

(function () {
  let name = "Digital Innovation One";
  return name;
})();

(function (a, b) {
  return a + b;
})(1, 2);


const soma3 = (function (a, b) {
  return a + b;
})(1, 2);

console.log(soma3);

------- Função Callbacks -------

Uma função passada como argumento para outra.
Utilizando callbacks, você tem maior controle da ordem de chamadas.


const calc = function (operacao, num1, num2) {
  return operacao(num1, num2);
};

const soma = function (num1, num2) {
  return num1 + num2;
};

const sub = function (num1, num2) {
  return num1 - num2;
};

const resultSoma = calc(soma, 1, 2);
const resultSub = calc(sub, 1, 2);

console.log(resultSub);
console.log(resultSoma);

------- Parâmetros -------
o Parâmetro num por default é 1, se 

function exponencial(array, num = 1) {
  const result = [];
  for (let i = 0; i < array.length; i++) {
    result.push(array[i] ** num);
  }
  return result;
}

o Parâmetro num por default é 1,
exponencial([1, 2, 3, 4]);

caso passe outro Parâmetro num por vai receber o numero neste caso (4)
exponencial([1, 2, 3, 4], 4);


------- Arguments -------
Um array com todos os parâmetros passados quando a função foi invocada.

function showArgs() {
  return arguments;
}

console.log(showArgs(1, 2, [2, 3, 4], "String"));


------- Array e Objetos -------
- Arrays

Spread: uma forma de lidar separadamente com elementos. usa quando esta chamando uma função.

function sum(x, y, z) {
  return x + y + z;
}

const numbers = [1, 2, 3];
console.log(sum(...numbers));

O que era parte de um array se torna um elemento independente.
-------------------------------

Rest: combina os argumentos em um array. usa quando esta declarando uma função.

function confereTamanho(...args) {
  console.log(args.length);
}

confereTamanho();
confereTamanho(1, 2);
confereTamanho(1, 2, 3);

O que era um elemento independente se torna parte de um array.

- Objetos
Object Destructuring

const user = {
  id: 42,
  displayName: "jdoe",
  fullName: {
    firstName: "John",
    lastName: "Doe",
  },
};

function userId({ id }) {
  return id;
}

function getFullName({ fullName: { firstName: first, lastName: last } }) {
  return `${first} ${last}`;
}

userId(user);
getFullName(user);

Entre chaves {}, podemos filtrar apenas os dados que nos interessam em um objeto.


------- Loops -------

if/else

A pratica de colocar a verificação em uma constante, pois fica bem claro o que você está verificando.


function numeroPositivo(num) {
  let resultado;

  const ehNegativo = num < 0; //(clean code)

  if (ehNegativo) {
    resultado = false;
  } else {
    resultado = true;
  }
  return resultado;
}

function numeroPositivo(num) {
  const ehNegativo = num < 0; //(clean code)
  if (ehNegativo) {
    return false;
  }

  return true;
}

JavaScript não tem elseif, as palavras sempre estão espaçadas!

function numeroPositivo1(num) {
  const ehNegativo = num < 0; //(clean code)
  const maiorQueDez = num > 10;

  if (ehNegativo) {
    return "Esse número é negativo";
  } else if (!ehNegativo && maiorQueDez) {
    return "Esse número é positivo e maior que 10!";
  }

  return "Esse número é positivo!";
}


----------- Switch /case -----------
-Equivale a uma comparação de tipo e valor (===)
-Sempre precisa de um calor "default"
-Ideal para quando se precisa comparar muitos valores

function getAnimal(id) {
  switch (id) {
    case 1:
      return "cão";
    case 2:
      return "gato";
    case 3:
      return "pássaro";
    default:
      return "peixe";
  }
}

getAnimal(1);
getAnimal(4);
getAnimal("1");


----------- For -----------
Loop dentro de elementos iteráveis (arrays, strings).

function multiplicaPorDois(arr) {
  let multiplicados = [];

  for (let i = 0; i < arr.length; i++) {
    multiplicados.push(arr[i] * 2);
  }
  return multiplicados;
}

const meusNumeros = [2, 33, 456, 356, 40];

multiplicaPorDois(meusNumeros);

----------- For...in -----------
Loop entre propriedades enumeráveis de um objeto.


function forInExemplo(obj) {
  for (prop in obj) {
    console.log(prop);
  }
}

const meuObjeto = {
  nome: "João",
  idade: "20",
  cidade: "Salvador",
};

forInExemplo(meuObjeto);

---------------------------
function forInExemplo(obj) {
  for (prop in obj) {
    console.log(obj[prop]);
  }
}

const meuObjeto = {
  nome: "João",
  idade: "20",
  cidade: "Salvador",
};

forInExemplo(meuObjeto);

----------- For...of -----------

Loop entre estruturas iteráveis(arrays, strings).

function logLetras(palavras) {
  for (letra of palavra) {
    console.log(letra);
  }
}

const palavra = "abacaxi";

logLetras(palavra);


-------------------

function logNumeros(nums) {
  for (num of nums) {
    console.log(num);
  }
}

const nums = [30, 20, 233, 2];

logNumeros(nums);


----------- While e Do...while -----------
- While: Executa nstruções até que a condição se torne falsa.

function exemploWhile() {
  let num = 0;

  while (num <= 5) {
    console.log(num);
    num++;
  }
}

exemploWhile();

--------------------

- Do...while: Executa instruções até que a condição se torne falsa. Porém a primeira execução sempre ocorre.

function exemploDoWhile() {
  let num = 0;
  do {
    console.log(num);
    num++;
  } while (num <= 5);
}

exemploDoWhile();


function exemploDoWhile() {
  let num = 6;
  do {
    console.log(num);
    num++;
  } while (num <= 5);
}

exemploDoWhile();


----------- This -----------

A palavra reservada this é uma referência de contexto. No exepmlo, this refere-se ao objeto pessoa.

const pessoa = {
  firstName: "André",
  lastName: "Soares",
  id: 1,
  fullName: function () {
    return this.firstName + " " + this.lastName;
  },
  getId: function () {
    return this.id;
  },
};

pessoa.fullName();

pessoa.getId();

Seu valor pode mudar de acordo com o lugar no código onde foi chamada.

|   contexto             |               Referência                 |
|                        |                                          |
|  Em um objeto(método)  |    Próprio objeto dono do método         |
|     Sozinho            |    Objeto global(em navegadores, window) |
|     Função             |    Objeto global                         |
|     Evento             |    Elemento que recebeu o evento         |

----------------------
Manipulando seu valor
- Call
É possivel passar parâmetrospara essa função separando-os por vírgulas.

const pessoa = {
  nome: "Miguel",
};

const animal = {
  nome: "Murphy",
};

function getSomeThing() {
  console.log(this.nome);
}

getSomeThing.call(pessoa);
getSomeThing.call(animal);


const myObj = {
  num1: 2,
  num2: 4,
};

function soma(a, b) {
  console.log(this.num1 + this.num2 + a + b);
}

soma.call(myObj, 1, 5);


-----------
- Apply
É possível passar parâmetros para essa função dentro de um array.

const pessoa = {
  nome: "Miguel",
};

const animal = {
  nome: "Godi",
};

function getSomeThing() {
  console.log(this.nome);
}

getSomeThing.apply(pessoa);
getSomeThing.apply(animal);


const myObj = {
  num1: 2,
  num2: 4,
};

function soma(a, b) {
  console.log(this.num1 + this.num2 + a + b);
}

soma.apply(myObj, [1, 5]);


----------
Bind
Clonar a estrutura da função onde é chamada e aplica o valor do objeto passado como parâmetro.

const retornaNomes = function () {
  return this.nome;
};

let bruno = retornaNomes.bind({ nome: "Bruno" });

bruno();



----------- Arrow functions -----------
const helloWorld = function () {
  return "Hello World!";
};

--- Abaixo sintaxe de Arrow Functions ---
const helloWorld = () => {
  return "Hello World!";
};

const helloWorld = () => "Hello World!";

console.log(helloWorld());


--- Algumas possibilidade de Arrow functions ---

-Caso exista apenas uma linha, pode dispensar as chaver e o return.
-Caso exista apenas um parâmetro, pode dispensar os parênteses.


const soma = (a, b) => a + b;

soma(4, 6);

const soma = (a) => a;

soma(4);


--- Outras restrinções ---
-Arrow functions não faz hosting! 
-"This" sempre será o objeto global. Métodos para modificar seu valor não irão funcionar;
-Não existe o objeto "arguments"
-O construtor (ex: new MeuObjeto()) tambem não pode ser utilizado