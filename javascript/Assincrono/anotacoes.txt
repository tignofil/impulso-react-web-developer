----- Assincrono -----

Assincrono -> "Que não ocorre ou não se efetiva ao mesmo tempo."
O javascript roda de maneira sincrona.

--- Promises
Objeto de processamento assíncrono.
Inicialmente, seu valor é desconhecido. Ela pode, então, ser resolvida ou rejeitada.

Uma promise pode ter 3 estados:
1 - Pending (Pendente)
2 - Fulfilled (Completada)
3 - Rejected (Rejeitada)

-- Estrutura

const myPromise = new Promise((resolve, reject) => {
  window.setTimeout(() => {
    resolve(console.log("Resolvida"));
  }, 2000);
});

-- Manipulação

const myPromise = new Promise((resolve, reject) => {
  window.setTimeout(() => {
    resolve(console.log("Resolvida"));
  }, 2000);
});

await myPromise
  .then((result) => result + " passando pelo then")
  .then((result) => result + " e agora acabou!")
  .catch((err) => console.log(err.message));

-- async/await
Funções assincronas precisam dessas duas palavras chave.

async function resolvePromise() {
  const myPromise = new Promise((resolve, reject) => {
    window.setTimeout(() => {
      resolve(console.log("Resolvida"));
    }, 3000);
  });

  const resolved = await myPromise
    .then((result) => result + " passando pelo then")
    .then((result) => result + " e agora acabou!")
    .catch((err) => console.log(err.message));

  return resolved;
}


-- Usando o try/catch
async function resolvePromise() {
  const myPromise = new Promise((resolve, reject) => {
    window.setTimeout(() => {
      resolve(console.log("Resolvida"));
    }, 3000);
  });

  let result;
  try {
    result = await myPromise
      .then((result) => result + " passando pelo then")
      .then((result) => result + " e agora acabou!");
  } catch (err) {
    result = err.message;
  }

  return result;
}

----- APIs e Fetch -----
APIs (Application Programming Interface)
Uma API é uma forma de intermediar os resultados do back-end com o que é apresentado no front-end.
Você consegue acessá-la por meio de URls.

-- JSON (JavaScript Object Notation)
è muio comum que APIs retornem seus dados no formato .json, portanto precisamos tratar esses dados quando os recebermos.

--- Fetch ---
Consumindo APIs
fetch(url, options)
  .then((response) => response.json())
  .then((json) => console.log(json));

// retorna uma Promise


-- Operações no banco



